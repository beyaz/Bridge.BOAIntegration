webpackJsonp([30],{
/***/ 2044:
/***/ (function(module, exports, __webpack_require__) {
"use strict";
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(0);
var card_transaction_list_1 = __webpack_require__(2151);
var b_framework_1 = __webpack_require__(8);
var b_account_component_1 = __webpack_require__(158);
var b_combo_box_1 = __webpack_require__(12);
var b_grid_section_1 = __webpack_require__(24);
var b_grid_row_1 = __webpack_require__(23);
var b_input_mask_1 = __webpack_require__(125);
var b_datetime_picker_1 = __webpack_require__(50);
var b_form_manager_1 = __webpack_require__(14);
var b_dialog_box_1 = __webpack_require__(7);
var b_component_1 = __webpack_require__(5);
var b_localization_1 = __webpack_require__(21);
// --- Injected Code --->
if (!window['Bridge']) 
{    
    window.React = React;   
	var IncludeJs = function IncludeJs(url) 
	{
		$.ajax({
			url: url,
			dataType: 'script',
			async: false
		});
	};
	IncludeJs('bridge.js');
	IncludeJs('bridge.meta.js');
	IncludeJs('newtonsoft.json.js');
	
	if (!Bridge.$BOAIntegration) {
		Bridge.$BOAIntegration = 
        {
            $_extends: _extends        
        };
	}
	
	Bridge.$BOAIntegration.BrowsePageInTypeScript = b_framework_1.BrowsePage;
	IncludeJs('Bridge.BOAIntegration.js');
	IncludeJs('Bridge.BOAIntegration.meta.js');
	IncludeJs('BOA.One.Office.CardGeneral.DebitCard.js');
    IncludeJs('BOA.One.Office.CardGeneral.DebitCard.meta.js');
	
	Bridge.BOAIntegration.$__webpack_require__ = __webpack_require__;
	var InheritBridgeClassFromTypeScriptClass = function(subClass,baseClass)
	{
		var  prototypes =  subClass.prototype;
		
		_inherits(subClass,baseClass);
		
		for(var p in prototypes)
		{
			subClass.prototype[p] = prototypes[p];
		}
		
		// for support bridge type system.
		// subClass.prototype['$getType'] = function(){  return subClass; }
	}
	// InheritBridgeClassFromTypeScriptClass( Bridge.BOAIntegration.BrowsePage, b_framework_1.BrowsePage );
	// InheritBridgeClassFromTypeScriptClass( BOA.One.Office.CardGeneral.DebitCard.CardTransactionListScreen.View , Bridge.BOAIntegration.BrowsePage );
	
	
}
// <--- Injected Code ---
// Debit kart işlem listeleme
var CardTransactionList = function (_b_framework_1$Browse) {
    _inherits(CardTransactionList, _b_framework_1$Browse);
    function CardTransactionList(props) {
        
		_classCallCheck(this, CardTransactionList);
		
        var _this = _possibleConstructorReturn(this, (CardTransactionList.__proto__ || Object.getPrototypeOf(CardTransactionList)).call(this, props));
        
		_this.connect(_this, [card_transaction_list_1.default]);
		
		// --- Injected Code --->
		_this.$DotNetVersion                    = new BOA.UI.CardGeneral.DebitCard.CardTransactionListScreen.View();
		_this.$DotNetVersion.$TypeScriptVersion = _this;
		_this.state.columns = _this.$DotNetVersion.$columns
		// <--- Injected Code ---
		
        
		_this.onCustomerSelect = _this.onCustomerSelect.bind(_this);
        _this.onCustomerNotFound = _this.onCustomerNotFound.bind(_this);
        if (!_this.state.windowRequest) {
            _this.setDefaultState();
        }
        // _this.getExternalResponseCodesCommand();
        return _this;
    }
    // PROPS ////////////////////////////////////////////////////////////////////////////////////////////
    // Set default staate values
    _createClass(CardTransactionList, [{
        key: "setDefaultState",
        value: function setDefaultState() {
            this.state.windowRequest = this.getDefaultPageRequest();
            // this.state.columns = this.getGridColumns();
            this.state.dataSource = [];
        }
        // Reset request
    }, {
        key: "resetRequest",
        value: function resetRequest() {
            var newInstanceOfWindowRequest = Object.assign({}, this.getPageRequest());
            this.setState({ windowRequest: newInstanceOfWindowRequest });
        }
    }, {
        key: "getPageRequest",
        value: function getPageRequest() {
            return this.state.windowRequest;
        }
    }, {
        key: "getDefaultPageRequest",
        value: function getDefaultPageRequest() {
            var windowRequest = {
                searchContract: {
                    transactionDateBegin: new Date(this.getApplicationContext().channel.today),
                    transactionDateEnd: new Date(this.getApplicationContext().channel.today),
                    accountNumber: null, cardNumber: null,
                    processTransactionTimeBegin: null,
                    processTransactionTimeEnd: null,
                    externalResponseCodes: [0]
                }
            };
            return windowRequest;
        }
        /**
         * Uyguma sunucusu ile istemci arasındaki kullanılan verileri getirir
         * @returns ApplicationContext
         */
    }, {
        key: "getApplicationContext",
        value: function getApplicationContext() {
            return this.state.context.applicationContext;
        }
        /**
         * Ekran kaynak bilgisini dönderir
         * @returns Common.ResourceNode
         */
    }, {
        key: "getResourceInfo",
        value: function getResourceInfo() {
            return this.state.pageParams.resourceInfo;
        }
        /**
         * Prepare the data grid columns
         * @returns grid columns
         */
    }, {
        key: "getGridColumns",
        value: function getGridColumns() {
            var columns = [{ key: "debitTransaction.cardNumber", name: b_framework_1.getMessage("CardGeneral", "CardNumber"), width: 140, resizable: true }, { key: "debitTransaction.accountNumber", name: b_framework_1.getMessage("CardGeneral", "CustomerNumber"), width: 80, resizable: true }, { key: "debitTransaction.accountSuffix", name: b_framework_1.getMessage("CardGeneral", "AnnexNo"), width: 60, resizable: true }, { key: "debitTransaction.processTransactionDate", name: b_framework_1.getMessage("CardGeneral", "LabelProcessDate"), width: 100, resizable: true }, { key: "debitTransaction.processTransactionTime", name: b_framework_1.getMessage("CardGeneral", "ProcessingTime"), width: 100, resizable: true }, { key: "externalTransactionCodeDescription", name: b_framework_1.getMessage("CardGeneral", "ProcessName"), width: 100, resizable: true }, { key: "debitTransaction.originalCurrencyCode", name: b_framework_1.getMessage("CardGeneral", "OriginalCurrency"), width: 100, resizable: true }, { key: "debitTransaction.originalAmount", name: b_framework_1.getMessage("CardGeneral", "OriginalAmount"), width: 100, resizable: true, type: "number", numberFormat: "M" }, { key: "debitTransaction.billingCurrencyCode", name: b_framework_1.getMessage("CardGeneral", "TransactionCurrency"), width: 100, resizable: true }, { key: "debitTransaction.billingAmount", name: b_framework_1.getMessage("CardGeneral", "LabelProcessAmount"), width: 100, resizable: true, type: "number", numberFormat: "M" }, { key: "debitTransaction.location", name: b_framework_1.getMessage("CardGeneral", "ActionLocation"), width: 100, resizable: true }, { key: "debitTransaction.externalResponseCode", name: b_framework_1.getMessage("CardGeneral", "ResponseCodeNumber"), width: 70, resizable: true }, { key: "debitTransaction.merchantCode", name: b_framework_1.getMessage("CardGeneral", "MCC"), width: 70, resizable: true }, { key: "debitTransaction.acquirerId", name: b_framework_1.getMessage("CardGeneral", "CodeOfBank"), width: 100, resizable: true }, { key: "acquirerIdDescription", name: b_framework_1.getMessage("CardGeneral", "Bank"), width: 100, resizable: true }, { key: "debitTransaction.entryMode", name: b_framework_1.getMessage("CardGeneral", "PosInputMode"), width: 100, resizable: true }, { key: "debitTransaction.terminalId", name: b_framework_1.getMessage("CardGeneral", "TerminalId"), width: 100, resizable: true }];
            return columns;
        }
        // COMMANDS ////////////////////////////////////////////////////////////////////////////////////////////
        // Clear the window data and set default values of criteries field
    }, {
        key: "clearCommand",
        value: function clearCommand() {
			this.$DotNetVersion.clearCommand();
			return;
			
            b_form_manager_1.BFormManager.clearStatusMessage();
            this.snaps.controlAccount.resetValue();
            this.snaps.controlCardNo.resetValue();
            this.snaps.controlBeginDate.resetValue();
            this.snaps.controlEndDate.resetValue();
            this.snaps.controlReplyResultCode.resetValue();
            this.setDefaultState();
            this.resetRequest();
        }
        /**
         * Get data from database by criteries
         * @param command
         */
    }, {
        key: "getInfoCommand",
        value: function getInfoCommand(command) {
            this.setDefaultState();
            b_form_manager_1.BFormManager.clearStatusMessage();
            var windowRequest = this.getPageRequest();
            windowRequest.methodName = "Search";
            windowRequest.mainAccountNumber = this.getApplicationContext().user.customerid;
            windowRequest.actionId = command.actionId;
            windowRequest.resourceCode = this.getResourceInfo().resourceCode;
            //Field binding
            windowRequest.searchContract.accountNumber = this.snaps.controlAccount.props.accountNumber;
            if (this.snaps.controlCardNo.getValue().value) {
                windowRequest.searchContract.cardNumber = this.snaps.controlCardNo.getValue().value.replace(/ /g, "");
            }
            if (this.snaps.controlBeginDate.getValue()) {
                windowRequest.searchContract.transactionDateBegin = this.snaps.controlBeginDate.getValue();
                windowRequest.searchContract.processTransactionTimeBegin = this.snaps.controlBeginDate.getValue().toTimeString().substr(0, 8).replace(/:/g, "");
            }
            if (this.snaps.controlEndDate.getValue()) {
                windowRequest.searchContract.transactionDateEnd = this.snaps.controlEndDate.getValue();
                windowRequest.searchContract.processTransactionTimeEnd = this.snaps.controlEndDate.getValue().toTimeString().substr(0, 8).replace(/:/g, "");
            }
            windowRequest.searchContract.externalResponseCodes = this.snaps.controlReplyResultCode.getValue().value;
            //Controls
            if (windowRequest.searchContract.transactionDateBegin > windowRequest.searchContract.transactionDateEnd) {
                b_form_manager_1.BFormManager.showStatusMessage(b_framework_1.getMessage("CoreBanking", "BeginDateNotGraterThanEndDate_2"));
                return;
            }
            var proxyRequest = {
                requestClass: "BOA.Types.CardGeneral.DebitCard.CardTransactionRequest",
                requestBody: windowRequest,
                key: windowRequest.methodName
            };
            var isValide = this.validate(proxyRequest.requestBody, command.actionId);
            if (isValide) {
                this.proxyExecute(proxyRequest);
            }
        }
        /**
         * Set the grid data source
         * @param response
         */
    }, {
        key: "getInfoCommandRespond",
        value: function getInfoCommandRespond(response) {
            var success = response.success,
                value = response.value,
                results = response.results;
            if (!success) {
                this.setState({ dataSource: [] });
                b_dialog_box_1.BDialogHelper.showError(this.state.context, b_framework_1.getMessage("CoreBanking", "OperationFailedMessage"), results);
                return;
            }
            var contractList = value || [];
            if (contractList.length === 0) {
                b_form_manager_1.BFormManager.showStatusMessage(b_framework_1.getMessage("CoreBanking", "RecordsNotFound"));
                return;
            } else {
                for (var v in contractList) {
                    contractList[v].debitTransaction.processTransactionDate = b_localization_1.BLocalization.formatDateTime(contractList[v].debitTransaction.processTransactionDate, "DD.MM.YYYY");
                }
            }
            var arg = [contractList.length.toString()];
            var msg = b_component_1.BComponent.Utils.stringFormat(b_framework_1.getMessage("BOA", "RowCountMessage"), arg);
            b_form_manager_1.BFormManager.showStatusMessage(msg);
            this.setState({ dataSource: contractList });
        }
        /**
         * Get data from database by criteries
         * @param command
         */
    }, {
        key: "getExternalResponseCodesCommand2",
        value: function getExternalResponseCodesCommand() {
            b_form_manager_1.BFormManager.clearStatusMessage();
            var proxyRequest = {
                requestClass: "BOA.Types.CardGeneral.DebitCard.CardTransactionRequest",
                requestBody: {
                    methodName: "GetExternalResponseCodes",
                    dataContract: { languageId: 1 }
                },
                key: "GetExternalResponseCodes"
                //showProgress: true
            };
            this.proxyExecute(proxyRequest);
        }
        /**
         * Set the combobox data source
         * @param response
         */
    }, {
        key: "getExternalResponseCodesCommandRespond",
        value: function getExternalResponseCodesCommandRespond(response) {
            var success = response.success,
                value = response.value,
                results = response.results;
            if (!success) {
                this.setState({ externalResponseCodeList: [] });
                b_dialog_box_1.BDialogHelper.showError(this.state.context, b_framework_1.getMessage("CoreBanking", "OperationFailedMessage"), results);
                return;
            }
            var contractItem = value || [];
            this.externalResponseCodeList = contractItem;
        }
    }, {
        key: "proxyDidRespond",
        value: function proxyDidRespond(proxyResponse) {
			this.$DotNetVersion.proxyDidRespond(proxyResponse);
			return;
            var key = proxyResponse.key,
                response = proxyResponse.response;
            switch (key) {
                case "Search":
                    {
                        this.getInfoCommandRespond(response);
                        break;
                    }
                case "GetExternalResponseCodes":
                    {
                        this.getExternalResponseCodesCommandRespond(response);
                        break;
                    }
                default:
            }
        }
    }, {
        key: "updateContractField",
        value: function updateContractField(fieldName, value) {
            var windowRequest = this.getPageRequest();
            windowRequest.searchContract[fieldName] = value;
            this.resetRequest();
        }
        // EVENTS //////////////////////////////////////////////////////////////////////////////////////////// 
    }, {
        key: "onActionClick",
        value: function onActionClick(command) {
			this.$DotNetVersion.onActionClick(command);
			return;
			
            switch (command.commandName) {
                case "GetInfo":
                    this.getInfoCommand(command);
                    break;
                case "Clear":
                    this.clearCommand();
                    break;
                default:
            }
        }
    }, {
        key: "onCustomerSelect",
        value: function onCustomerSelect(selectedCustomer) {
            if (selectedCustomer && selectedCustomer.customerInfo) {
                this.updateContractField("accountNumber", selectedCustomer.customerInfo.customerid);
            }
        }
    }, {
        key: "onCustomerNotFound",
        value: function onCustomerNotFound() {
            this.resetRequest();
        }
        // Render the page.
    }, {
        key: "render",
        value: function render() {
			
			return this.$DotNetVersion.render();
			
			
            var _this2 = this;
            var windowRequest = this.getPageRequest();
            var context = this.state.context;
            var codeDataSource = [{ "externalResponseCode": 0, "description": "Approved or completed successfully" }];
            var codeList = this.externalResponseCodeList === undefined ? codeDataSource : this.externalResponseCodeList;
            return React.createElement(
                b_grid_section_1.BGridSection,
                { pageParams: this.state.pageParams, context: context },
                React.createElement(
	b_grid_row_1.BGridRow, {
	pageParams: this.state.pageParams,
	context: context
},
	React.createElement(b_account_component_1.BAccountComponent, 
	
	_extends({
			pageParams: this.state.pageParams,
			context: context,
			ref: function ref(r) {
				return _this2.snaps.controlAccount = r;
			},
			accountNumber: windowRequest.searchContract.accountNumber,
			onCustomerSelect: this.onCustomerSelect,
			onCustomerNotFound: this.onCustomerNotFound,
			isVisibleBalance: false,
			isVisibleIBAN: false,
			snapshot: this.state.snapshot["controlAccount"],
			snapKey: "controlAccount"
		}, this.state.dynamicProps["controlAccount"])
		
		
		))

		
		,
                React.createElement(
                    b_grid_row_1.BGridRow,
                    { pageParams: this.state.pageParams, context: context },
                    React.createElement(b_input_mask_1.BInputMask, _extends({ pageParams: this.state.pageParams, context: context, ref: function ref(r) {
                            return _this2.snaps.controlCardNo = r;
                        }, type: "CreditCard", hintText: b_framework_1.getMessage("CardGeneral", "CardNumber"), floatingLabelText: b_framework_1.getMessage("CardGeneral", "CardNumber"), snapshot: this.state.snapshot["controlCardNo"], snapKey: "controlCardNo" }, this.state.dynamicProps["controlCardNo"]))
                ),
                React.createElement(
                    b_grid_row_1.BGridRow,
                    { pageParams: this.state.pageParams, context: context },
                    React.createElement(b_datetime_picker_1.BDateTimePicker, _extends({ pageParams: this.state.pageParams, context: context, ref: function ref(r) {
                            return _this2.snaps.controlBeginDate = r;
                        }, disabled: false, floatingLabelTextDate: b_framework_1.getMessage("CardGeneral", "TransactionStartDate"), floatingLabelTextTime: b_framework_1.getMessage("CardGeneral", "TransactionStartTime"), snapshot: this.state.snapshot["controlBeginDate"], snapKey: "controlBeginDate" }, this.state.dynamicProps["controlBeginDate"]))
                ),
                React.createElement(
                    b_grid_row_1.BGridRow,
                    { pageParams: this.state.pageParams, context: context },
                    React.createElement(b_datetime_picker_1.BDateTimePicker, _extends({ pageParams: this.state.pageParams, context: context, ref: function ref(r) {
                            return _this2.snaps.controlEndDate = r;
                        }, disabled: false, floatingLabelTextDate: b_framework_1.getMessage("CardGeneral", "TransactionDeadline"), floatingLabelTextTime: b_framework_1.getMessage("CardGeneral", "TransactionEndTime"), snapshot: this.state.snapshot["controlEndDate"], snapKey: "controlEndDate" }, this.state.dynamicProps["controlEndDate"]))
                ),
             React.createElement(
					b_grid_row_1.BGridRow, {
					pageParams: this.state.pageParams,
					context: context
				},
					React.createElement(b_combo_box_1.BComboBox, _extends({
							pageParams: this.state.pageParams,
							context: context,
							ref: function ref(r) {
								return _this2.snaps.controlReplyResultCode = r;
							},
							hintText: b_framework_1.getMessage("CardGeneral", "CodeOfActionAnswer"),
							labelText: b_framework_1.getMessage("CardGeneral", "CodeOfActionAnswer"),
							dataSource: codeList,
							columns: [{
									"key": "externalResponseCode",
									"name": b_framework_1.getMessage("CardGeneral", "ResponseCodeNumber"),
									"width": 60,
									"type": "number"
								}, {
									"key": "description",
									"name": b_framework_1.getMessage("CardGeneral", "AnswersDescription"),
									"width": 100,
									"type": "string"
								}
							],
							defaultValue: windowRequest.searchContract.externalResponseCodes,
							displayLabelSeperator: ",",
							multiSelect: true,
							multiColumn: true,
							isAllOptionIncluded: true,
							valueMemberPath: "externalResponseCode",
							displayMemberPath: "description",
							snapshot: this.state.snapshot["controlReplyResultCode"],
							snapKey: "controlReplyResultCode"
						}, this.state.dynamicProps["controlReplyResultCode"])))

            );
        }
    }]);
    return CardTransactionList;
}(b_framework_1.BrowsePage);
exports.default = b_framework_1.BrowsePageComposer(CardTransactionList);
//# sourceMappingURL=card-transaction-list.jsx.map
/***/ }),
/***/ 2151:
/***/ (function(module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Actions = __webpack_require__(2152);
exports.cardTransactionList = function cardTransactionList() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { success: false, isLoading: false };
    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { type: 'UNKNOWN', payload: { data: {} } };
    switch (action.type) {
        case Actions.SET_WINDOW_REQUEST:
            {
                var data = action.payload.data;
                return Object.assign({}, state, { windowRequest: data.windowRequest });
            }
        default:
            return state;
    }
};
exports.default = exports.cardTransactionList;
//# sourceMappingURL=card-transaction-list.jsx.map
/***/ }),
/***/ 2152:
/***/ (function(module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var b_framework_1 = __webpack_require__(8);
var _ = 'CARDGENERAL_DEBITCARD_CARD-TRANSACTION-LIST_';
exports.GETINFO = _ + 'GETINFO';
exports.SET_WINDOW_REQUEST = _ + "SET_WINDOW_REQUEST";
exports.CLEAR_DATASOURCE = _ + 'CLEAR_DATASOURCE';
function getInfo(request) {
    b_framework_1.serviceCall(request.type, request.body, [], null).done(function (response) {
        b_framework_1.store.dispatch({
            type: exports.GETINFO,
            payload: {
                data: {
                    success: response.success,
                    value: response.value,
                    result: response.results
                }
            }
        });
    });
}
exports.getInfo = getInfo;
function setWindowRequest(windowRequest) {
    b_framework_1.store.dispatch({
        type: exports.SET_WINDOW_REQUEST,
        payload: {
            data: {
                windowRequest: windowRequest
            }
        }
    });
}
exports.setWindowRequest = setWindowRequest;
function clear() {
    b_framework_1.store.dispatch({
        type: exports.CLEAR_DATASOURCE,
        payload: {
            data: {
                dataSource: []
            }
        }
    });
}
exports.clear = clear;
//# sourceMappingURL=card-transaction-list.jsx.map
/***/ })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,